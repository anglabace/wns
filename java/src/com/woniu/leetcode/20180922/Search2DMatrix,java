package leetcode.date_20180922;

/**
 * 
	题目描述：搜索二维矩阵
	编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：

	每行中的整数从左到右按升序排列。
	每行的第一个整数大于前一行的最后一个整数。
	示例 1:
	
	输入:
	matrix = [
	  [1,   3,  5,  7],
	  [10, 11, 16, 20],
	  [23, 30, 34, 50]
	]
	target = 3
	输出: true
	示例 2:
	
	输入:
	matrix = [
	  [1,   3,  5,  7],
	  [10, 11, 16, 20],
	  [23, 30, 34, 50]
	]
	target = 13
	输出: false
	
	解题思路：此题并未让暴力破解，因为每一层的 第一个数大于前边任何一个数，所以，我们就需要从这里找切入口。
	首先判断的是nums[n-1][0]这个为，如果大于该值，必在本行后边，否则，继续在前边位置查找。避免了很多无用查询。
	
	题目链接；https://leetcode-cn.com/problems/search-a-2d-matrix/description/
 * @author woniu
 *
 */
public class Search2DMatrix {
    public boolean searchMatrix(int[][] matrix, int target) {
        
    	if(matrix.length == 0) {
    		return false;
    	}
    	
    	if(matrix[0].length == 0) {
    		return false;
    	}
    	
    	int n = matrix.length, m = matrix[0].length;
    	for(int i=n-1; i>=0; i--) {
    		if(matrix[i][0] <= target) {
    			for(int j=0; j<m; j++) {
    				if(matrix[i][j] == target) {
    					return true;
    				}
    			}
    		}
    	}
    	
    	return false;
    }
    
    public static void main(String[] args) {
		System.out.println(new Search2DMatrix().searchMatrix(new int[][] {}, 0));
		System.out.println(new Search2DMatrix().searchMatrix(new int[][] {{}}, 0));
		System.out.println(new Search2DMatrix().searchMatrix(new int[][] {{1}}, 1));
	}
}
