package leetcode.date_20180916;

import java.util.Arrays;
/**
 * 
	题目描述：最接近的三数之和
	给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。

	例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.
	
	与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).
	
	解题思路：首先对数组进行排序，之后，确定其中一个a, 然后b从左后，c从右向前，依次判断即可。
	
	题目链接：https://leetcode-cn.com/problems/3sum-closest/description/
 * @author woniu
 *
 */
public class _3SumClosest {
    public int threeSumClosest(int[] nums, int target) {
        
    	Arrays.sort(nums);
    	int result = Integer.MAX_VALUE;
    	int diff = Integer.MAX_VALUE;
    	int len = nums.length;
    	for(int i=0; i<len; i++) {
    		int start = i+1, end = len-1;
    		while(start < end) {
    			int sum = nums[i] + nums[start] + nums[end];
    			int curdiff = Math.abs(nums[i] + nums[start] + nums[end] - target);
    			if(curdiff < diff) {
    				result = sum;
    				diff = curdiff;
    			}
    			
    			if(sum < target) {
    				start ++;
    			} else {
    				end --;
    			}
    		}
    	}
    	
    	return result;
    }
    
    public static void main(String[] args) {
//    	int[] nums = {-1, 2, 1, -4};
//		System.out.println(new Solution().threeSumClosest(nums, -5));
//		
		System.out.println(new _3SumClosest().threeSumClosest(new int[] {0, 2, 1, -3}, 1));
	}
}
